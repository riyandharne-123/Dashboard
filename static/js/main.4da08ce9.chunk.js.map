{"version":3,"sources":["Components/data.js","Components/stats.js","App.js","serviceWorker.js","index.js"],"names":["data","props","state","items","isLoaded","fetch","then","res","json","setState","this","style","marginLeft","className","textAlign","letterSpacing","fontWeight","map","item","key","id","padding","class","name","body","email","Component","labels","datasets","label","fill","lineTension","backgroundColor","borderColor","borderWidth","stats","height","options","title","display","text","fontSize","legend","position","React","App","width","href","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"2MAsEeA,E,kDAlEd,WAAYC,GAAO,IAAD,8BACjB,cAAMA,IACDC,MAAM,CACTC,MAAM,GACNC,UAAS,GAJM,E,gEAQC,IAAD,OAEhBC,MAAM,iDACLC,MAAK,SAAAC,GAAG,OAAEA,EAAIC,UACdF,MAAK,SAAAE,GACJ,EAAKC,SAAS,CACbL,UAAS,EACTD,MAAMK,S,+BAMJ,MAGgBE,KAAKR,MAAtBE,EAHC,EAGDA,SAASD,EAHR,EAGQA,MACd,OAAIC,EAOJ,yBAAKO,MAAO,CAACC,WAAW,QAE1B,yBAAKC,UAAU,yBAAyBF,MAAO,CAACG,UAAU,WACxD,wBAAIH,MAAO,CAACI,cAAc,OAC5BC,WAAW,QADT,SAKF,yBAAKH,UAAU,gBACbV,EAAMc,KAAI,SAAAC,GAAI,OAChB,yBAAKC,IAAKD,EAAKE,IACf,yBAAKP,UAAU,YAAYF,MAAO,CAACU,QAAQ,SACzC,yBAAKR,UAAU,aACf,4BAAQS,MAAM,wBACd,4BAAKJ,EAAKK,OAEV,yBAAKV,UAAU,YACjB,wBAAIA,UAAU,gBAAd,YAAuCK,EAAKM,OAG5C,4BAAQX,UAAU,wBAChB,4BAAKK,EAAKO,gBA3BD,S,GA3BQC,a,QCCbxB,G,OAAQ,CACZyB,OAAQ,CAAC,UAAW,WAAY,QACvB,QAAS,OAClBC,SAAU,CACR,CACEC,MAAO,QACPC,MAAM,EACNC,YAAa,GACbC,gBAAiB,qBACjBC,YAAa,gBACbC,YAAa,EACblC,KAAM,CAAC,GAAI,GAAI,GAAI,GAAI,QAORmC,E,uKAEjB,OACQ,yBAAKxB,MAAO,CAACC,WAAW,QACpC,yBAAKC,UAAU,yBAAyBF,MAAO,CAACG,UAAU,WACxD,wBAAIH,MAAO,CAACI,cAAc,OAC5BC,WAAW,QADT,WAIF,yBAAKH,UAAU,gBACb,kBAAC,IAAD,CAAMF,MAAO,CAACyB,OAAO,QACbpC,KAAME,EACNmC,QAAS,CACPC,MAAM,CACJC,SAAQ,EACRC,KAAK,kBACLC,SAAS,IAEXC,OAAO,CACLH,SAAQ,EACRI,SAAS,kB,GApBYC,IAAMlB,WCI1BmB,MArBf,WAIE,OACE,yBAAKhC,UAAU,OACf,yBAAKS,MAAM,kCAAkCX,MAL3B,CACpBmC,MAAM,QAKN,wBAAIjC,UAAU,eAAd,QACD,4BAAI,uBAAGkC,KAAK,QAAQlC,UAAU,yBAA1B,SACH,4BAAI,uBAAGkC,KAAK,UAAUlC,UAAU,yBAA5B,gBAEN,kBAAC,IAAD,KACA,kBAAC,IAAD,KACC,kBAAC,IAAD,CAAOmC,KAAK,QAAQC,UAAWjD,IAC9B,kBAAC,IAAD,CAAOgD,KAAK,UAAUC,UAAWd,QCPfe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxD,MAAK,SAAAyD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.4da08ce9.chunk.js","sourcesContent":["import React,{Component} from 'react';\r\n\r\n\r\nclass data extends Component {\r\n constructor(props){\r\n  super(props);\r\n  this.state={\r\n    items:[],\r\n    isLoaded:false,\r\n  }\r\n}\r\n  // methods\r\ncomponentDidMount(){\r\n\r\n   fetch('https://jsonplaceholder.typicode.com/comments')\r\n   .then(res=>res.json())\r\n   .then(json=>{\r\n     this.setState({\r\n      isLoaded:true,\r\n      items:json,\r\n     })\r\n   });\r\n\r\n}\r\n\r\nrender(){\r\n//displaying data\r\n\r\n  var{ isLoaded,items }=this.state;\r\n  if(!isLoaded){\r\n    return null;\r\n  }\r\n  else{\r\n\r\n\r\n  return(\r\n  <div style={{marginLeft:'30%'}}>\r\n\r\n<div className=\"w3-container w3-indigo\" style={{textAlign:'center'}}>\r\n  <h1 style={{letterSpacing:\"10px\",\r\nfontWeight:\"600\"\r\n}}>Data</h1>\r\n</div>\r\n\r\n<div className=\"w3-container\">\r\n {items.map(item=>(\r\n<div key={item.id}>\r\n<div className=\"w3-card-4\" style={{padding:'10px'}}>\r\n  <div className=\"card-body\">\r\n  <header class=\"w3-container w3-blue\">\r\n  <h1>{item.name}</h1>\r\n</header>\r\n  <div className=\"col-md-7\">\r\n<h4 className=\"text-success\">Comment: {item.body}</h4>\r\n  </div>\r\n\r\n<footer className=\"w3-container w3-blue\">\r\n  <h5>{item.email}</h5>\r\n</footer>\r\n  </div>\r\n</div>\r\n</div>\r\n ))}\r\n</div>\r\n\r\n</div>\r\n    );\r\n}\r\n}\r\n}\r\nexport default data;\r\n","import React,{Component} from 'react';\r\nimport {Line} from 'react-chartjs-2';\r\nimport axios from \"axios\";\r\n\r\nconst state = {\r\n  labels: ['January', 'February', 'March',\r\n           'April', 'May'],\r\n  datasets: [\r\n    {\r\n      label: 'Posts',\r\n      fill: false,\r\n      lineTension: 0.5,\r\n      backgroundColor: 'rgba(75,192,192,1)',\r\n      borderColor: 'rgba(0,0,0,1)',\r\n      borderWidth: 2,\r\n      data: [65, 59, 80, 81, 56]\r\n    }\r\n  ]\r\n}\r\n\r\n\r\n\r\nexport default class stats extends React.Component {\r\n  render() {\r\n    return (         \r\n            <div style={{marginLeft:'30%'}}>\r\n<div className=\"w3-container w3-indigo\" style={{textAlign:'center'}}>\r\n  <h1 style={{letterSpacing:\"10px\",\r\nfontWeight:\"600\"\r\n}}>Charts</h1>\r\n</div>\r\n<div className=\"w3-container\">\r\n  <Line style={{height:\"100%\"}}\r\n          data={state}\r\n          options={{\r\n            title:{\r\n              display:true,\r\n              text:'Posts per month',\r\n              fontSize:20\r\n            },\r\n            legend:{\r\n              display:true,\r\n              position:'right'\r\n            }\r\n          }}\r\n        />\r\n</div>\r\n</div>\r\n    );\r\n  }\r\n}","import React,{Component} from 'react';\nimport { BrowserRouter, Route, Link  ,Switch} from \"react-router-dom\";\nimport data from './Components/data';\nimport stats from './Components/stats';\n\nfunction App() {\n      const mystyle = {\n  width:\"30%\",\n    };\n  return (\n    <div className=\"App\">\n    <div class=\"w3-sidebar w3-blue w3-bar-block\" style={mystyle}>\n  <h1 className=\"w3-bar-item\">Menu</h1>\n <h3><a href=\"/data\" className=\"w3-bar-item w3-button\">Data</a></h3>\n  <h3><a href=\"/charts\" className=\"w3-bar-item w3-button\">Statistics</a></h3>\n</div>\n<BrowserRouter>\n<Switch>\n <Route path=\"/data\" component={data} />\n  <Route path=\"/charts\" component={stats} />\n</Switch>\n</BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}